# patient-management-system/docker-compose.yml
version: '3.8'

services:
  postgres_db:
    image: postgres:15
    container_name: pms_postgres_db
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "${POSTGRES_PORT}:5432" # Exposes PostgreSQL to the host machine
    volumes:
      - postgres_data:/var/lib/postgresql/data
      # Optional: You can uncomment the next line to run an init script
      # - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - pms_network

  redis_cache:
    image: redis:7-alpine
    container_name: pms_redis_cache
    restart: unless-stopped
    ports:
      - "${REDIS_PORT}:6379" # Exposes Redis to the host machine
    volumes:
      - redis_data:/data
    networks:
      - pms_network

  rabbitmq_broker:
    image: rabbitmq:3.12-management-alpine
    container_name: pms_rabbitmq_broker
    restart: unless-stopped
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
    ports:
      - "${RABBITMQ_NODE_PORT}:5672"       # For application connection
      - "${RABBITMQ_MANAGEMENT_PORT}:15672" # For Management UI
    networks:
      - pms_network

  api_gateway:
    build:
      context: ./services/api-gateway
      dockerfile: Dockerfile
    container_name: pms_api_gateway
    restart: unless-stopped
    ports:
      - "${API_GATEWAY_PORT}:3000"
    environment:
      NODE_ENV: development
      PORT: 3000
      AUTH_SERVICE_URL: "http://auth_service:3001/api/v1" # For API Gateway to call Auth Service
    volumes:
      - ./services/api-gateway:/usr/src/app
      - /usr/src/app/node_modules # Keeps container's node_modules separate
    # ADD THIS LINE:
    depends_on:
      - postgres_db # API Gateway doesn't directly depend on DB, but good practice if it ever needs it
      - redis_cache
      - rabbitmq_broker
      - auth_service # For service discovery if needed, or just ordering
    networks:
      - pms_network
    command: npm run start:dev # Overrides Dockerfile CMD for development

  
  auth_service: # NEW SERVICE
    build:
      context: ./services/auth-service
      dockerfile: Dockerfile
    container_name: pms_auth_service
    restart: unless-stopped
    ports:
      - "${AUTH_SERVICE_PORT}:3001" # Expose to host, using variable from .env
    environment:
      NODE_ENV: development
      PORT: 3001 # Port inside the container
      DB_HOST: pms_postgres_db # Service name of PostgreSQL container
      DB_PORT: ${POSTGRES_PORT} # Port exposed by postgres_db service internally in Docker network
      DB_USERNAME: ${POSTGRES_USER}
      DB_PASSWORD: ${POSTGRES_PASSWORD}
      DB_DATABASE: ${POSTGRES_DB}
      JWT_SECRET: ${JWT_SECRET} # Get from root .env or define directly
      JWT_EXPIRATION_TIME: ${JWT_EXPIRATION_TIME:-3600s} # Default if not in root .env
    volumes:
      - ./services/auth-service:/usr/src/app
      - /usr/src/app/node_modules
    depends_on:
      - postgres_db # Auth service needs the DB to be up
    command: npm run start:dev # For hot-reloading in development
    networks:
      - pms_network

    # Add to patient-management-system/docker-compose.yml
  patient_service:
    build:
      context: ./services/patient-service
      dockerfile: Dockerfile
    container_name: pms_patient_service
    restart: unless-stopped
    ports:
      - "${PATIENT_SERVICE_PORT}:3002"
    environment:
      NODE_ENV: development
      PORT: 3002
      DB_HOST: pms_postgres_db
      DB_PORT: 5432
      DB_USERNAME: ${POSTGRES_USER}
      DB_PASSWORD: ${POSTGRES_PASSWORD}
      DB_DATABASE: ${POSTGRES_DB}
      REDIS_HOST: pms_redis_cache
      REDIS_PORT: 6379
      RABBITMQ_URL: amqp://${RABBITMQ_DEFAULT_USER}:${RABBITMQ_DEFAULT_PASS}@pms_rabbitmq_broker:5672
      JWT_SECRET: ${JWT_SECRET}
    volumes:
      - ./services/patient-service:/usr/src/app
      - /usr/src/app/node_modules
    depends_on:
      - postgres_db
      - redis_cache
      - rabbitmq_broker
    command: npm run start:dev
    networks:
      - pms_network

networks:
  pms_network:
    driver: bridge

volumes:
  postgres_data:
  redis_data: